// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Config Enum
enum RoleName {
  USER 
  MODERATOR
  ADMIN
  SUB_ADMIN
}

enum PermissionAction {
  READ
  CREATE
  UPDATE 
  DELETE
}

enum StatusAction {
  PENDING
  APPROVED
  REJECTED
}

// Config Model Schema
model User {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  email            String       @unique
  username         String?
  password         String?
  googleId         String?      @unique

  firstName        String?
  lastName         String?
  gender           String?
  avatarUrl        String?
  description      String?
  isVerified       Boolean      @default(false)

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
 
  userRoles        UserRole[]

  @@index([username, email])
}

model Role {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  name             RoleName     
  
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  userRoles        UserRole[]
  rolePermissions  RolePermission[]

  @@index([name])
}

model UserRole {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  user             User         @relation(fields: [userId], references: [id])
  userId           String       @db.ObjectId

  role             Role         @relation(fields: [roleId], references: [id])
  roleId           String       @db.ObjectId

  @@unique([userId, roleId])
}

model Permission {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  action           PermissionAction 
 
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  rolePermissions  RolePermission[]
}

model RolePermission {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId

  role             Role         @relation(fields: [roleId], references: [id])
  roleId           String       @db.ObjectId

  permission       Permission   @relation(fields: [permissionId], references: [id])
  permissionId     String       @db.ObjectId

  @@unique([roleId, permissionId])
}

model Post {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model PaperDocument {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Tag {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
}

model Category {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
}

model Forum {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Comment {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Notification {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
}
